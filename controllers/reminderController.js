const db = require('../config/db');

// ‚ûï Cr√©er un rappel
exports.createReminder = (req, res) => {
    const { user_id, day_of_week, time, title, notify } = req.body;

    const sql = `INSERT INTO reminder (user_id, day_of_week, time, title, notify)
                 VALUES (?, ?, ?, ?, ?)`;

    db.query(sql, [user_id, day_of_week, time, title, notify], (err, result) => {
        if (err) {
            console.error('Erreur cr√©ation rappel:', err);
            return res.status(500).json({ error: 'Erreur lors de la cr√©ation du rappel' });
        }
        res.status(201).json({ message: 'Rappel cr√©√©', id: result.insertId });
    });
};

// üìÑ Obtenir tous les rappels
exports.getAllReminders = (req, res) => {
    const sql = `SELECT * FROM reminder`;

    db.query(sql, (err, results) => {
        if (err) {
            console.error('Erreur r√©cup√©ration rappels:', err);
            return res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des rappels' });
        }

        res.status(200).json(results);
    });
};

// üìÑ Obtenir les rappels d'un utilisateur sp√©cifique
exports.getRemindersByUserId = (req, res) => {
    const { userId } = req.params;
    const sql = `SELECT * FROM reminder WHERE user_id = ? ORDER BY day_of_week, time`;

    db.query(sql, [userId], (err, results) => {
        if (err) {
            console.error('Erreur r√©cup√©ration rappels utilisateur:', err);
            return res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des rappels' });
        }

        res.status(200).json(results);
    });
};

// üîç Obtenir un rappel par ID
exports.getReminderById = (req, res) => {
    const { id } = req.params;
    db.query('SELECT * FROM reminder WHERE id = ?', [id], (err, result) => {
        if (err) {
            console.error('Erreur r√©cup√©ration rappel:', err);
            return res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration du rappel' });
        }
        if (result.length === 0) {
            return res.status(404).json({ message: 'Rappel non trouv√©' });
        }
        res.status(200).json(result[0]);
    });
};

// ‚úèÔ∏è Modifier un rappel
exports.updateReminder = (req, res) => {
    const { id } = req.params;
    const { user_id, day_of_week, time, title, notify } = req.body;

    const sql = `UPDATE reminder 
                 SET user_id = ?, day_of_week = ?, time = ?, title = ?, notify = ?
                 WHERE id = ?`;

    db.query(sql, [user_id, day_of_week, time, title, notify, id], (err, result) => {
        if (err) {
            console.error('Erreur mise √† jour rappel:', err);
            return res.status(500).json({ error: 'Erreur lors de la mise √† jour du rappel' });
        }
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Rappel non trouv√©' });
        }
        res.status(200).json({ message: 'Rappel mis √† jour' });
    });
};

// üóëÔ∏è Supprimer un rappel
exports.deleteReminder = (req, res) => {
    const { id } = req.params;

    db.query('DELETE FROM reminder WHERE id = ?', [id], (err, result) => {
        if (err) {
            console.error('Erreur suppression rappel:', err);
            return res.status(500).json({ error: 'Erreur lors de la suppression du rappel' });
        }
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Rappel non trouv√©' });
        }
        res.status(200).json({ message: 'Rappel supprim√©' });
    });
};
